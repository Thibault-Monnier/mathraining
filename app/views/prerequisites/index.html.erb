<% provide(:title, 'Prérequis') %>

<h1><%= title_2("Théorie", "Prérequis") %></h1>

<% fondations = Section.where(:fondation => true).pluck(:id).to_a %>

<!-- Graphique des prérequis -->
<script type="module">
  import { Graph } from "custom/springy"
  import "custom/springyui"

  function deci_to_hexa(x){
    var parts = [Math.floor(x / 16), x % 16];
    var letters = new Array("A", "B", "C", "D", "E", "F");
    var result = "";
    for (var i in parts) {
      if (parts[i] <= 9) {
        result = result.concat(parts[i].toString());
      }
      else {
        result = result.concat(letters[parts[i]-10]);
      }
    }
    return result;
  }
  
  var max_colors = [[0, 0, 200], [0, 200, 200], [0, 100, 230], [200, 0, 200], [150, 0, 0], [150, 150, 0], [100, 100, 100]]
  
  function get_color(a, b, i){
    var r = 255-Math.floor(max_colors[i][0] * a / b);
    var g = 255-Math.floor(max_colors[i][1] * a / b);
    var b = 255-Math.floor(max_colors[i][2] * a / b);
    return deci_to_hexa(r).concat(deci_to_hexa(g)).concat(deci_to_hexa(b));
  }
  
  var graph;
  var nodes;
  
  function computeGraph() {
    graph = new Graph();
    nodes = new Array();

    var start_node = graph.newNode({label: "Départ", color: "#0000FF", text: "#FFFFFF", bold: true});
    <% chapters_with_node = Set.new %>
    <% chapter_to_prerequisites = {} %>
    <% Chapter.where.not(:section_id => fondations).each do |chapter| %>
      <% chapters_with_node.add(chapter.id) %>
      <% chapter_to_prerequisites[chapter.id] = [] %>
    <% end %>
    
    <% Prerequisite.all.each do |p| %>
      <% if chapters_with_node.include?(p.prerequisite_id) && chapters_with_node.include?(p.chapter_id) %>
        <% chapter_to_prerequisites[p.chapter_id].push(p.prerequisite_id) %>
      <% end %>
    <% end %>
    
    <% max_difficulty = 0 %>
    <% chapter_id_to_difficulty = {} %>
    <% chapters_with_node.each do |chapter_id| %>
      <% to_visit = chapter_to_prerequisites[chapter_id].clone %>
      <% recursive_prerequisites = to_visit.to_set %>
      <% i = 0 %>
      <% while i < to_visit.size() %>
        <% id = to_visit[i] %>
        <% chapter_to_prerequisites[id].each do |other_id| %>
          <% unless recursive_prerequisites.include?(other_id) %>
            <% recursive_prerequisites.add(other_id) %>
            <% to_visit.push(other_id) %>
          <% end %>
        <% end %>
        <% i += 1 %>
      <% end %> 
      <% difficulty = recursive_prerequisites.size %>
      <% chapter_id_to_difficulty[chapter_id] = difficulty %>
      <% max_difficulty = [max_difficulty, difficulty].max %>
    <% end %> 

    <% Chapter.where.not(:section_id => fondations).each do |chapter| %>
      <% difficulty = chapter_id_to_difficulty[chapter.id] %>
      <% nom = chapter.name %>
      <% if nom.size > 35 %>
        <% nom = nom.slice(0..32) + "..." %>
      <% end %>
      nodes[<%= chapter.id %>] = graph.newNode({label: "<%= nom.html_safe  %>", color: "#".concat(get_color(<%= difficulty + 1 %>, <%= max_difficulty + 1 %>, <%= chapter.section_id - 1 %>)) <%= ", bold: true" if chapter.online %>});
      <% if difficulty == 0 %>
        graph.newEdge(start_node, nodes[<%= chapter.id %>], {color: "#CCCCCC"});
      <% end %>
    <% end %>

    <% chapter_to_prerequisites.each do |chapter_id, prerequisites| %>
      <% prerequisites.each do |prerequisite_id| %>
        graph.newEdge(nodes[<%= prerequisite_id %>], nodes[<%= chapter_id %>], {color: "#AAAAAA"});
      <% end %>
    <% end %>
  }
    
  function drawGraph() {
  
    // Get the canvas & context
    var c = document.getElementById("structure");
    var ctx = c.getContext('2d');
    var container = c.parentElement;
    
    var W = 900.0;
    var H = 600.0;
    
    c.setAttribute('width', container.offsetWidth); //max width
    c.setAttribute('height', H * container.offsetWidth / W); //max height

    container.style.height = H * container.offsetWidth / W + "px";
    
    var fontSize = Math.floor(container.offsetWidth / 70);
    if (fontSize > 12) {
      fontSize = 12;
    }
    
    computeGraph();
    var springy = window.springy = jQuery('#structure').springy({graph: graph, fontSize: fontSize});
  }
  
  var drawGraphDone = false;
  function drawGraphIfPossible() {
    if ("$" in window) {
      if (!drawGraphDone) {
        drawGraphDone = true;
        drawGraph();
      }
    }
  }
  callMethodWhenPossible(drawGraphIfPossible);
  
  // Does not work well to call springy several times:
  //window.addEventListener("resize", () => {
  //  if (drawGraphDone) {
  //    drawGraph();
  //  }
  //});
</script>

<div class="grid" style="--bs-columns: 12">
  <div class="g-col-12 text-center myoverflow">
    <center>
    <div style="width:100%; max-width:900px; height:600px; position:relative; display:block;">
    <canvas id="structure" width="900" height="600" style="position:absolute; left:0px; top:0px;">
    Votre navigateur ne supporte pas les canvas.
    </canvas>
    </div>
    </center>
  </div>
</div>

<% liste = Array.new %>

<!-- Création de la liste -->
<% [true, false].each do |f| %>
  <% Section.where(:fondation => f).each do |s| %>
    <% liste2 = Array.new %>
    <% liste2.push(s.name) %>
    <% liste3 = Array.new %>
    <% s.chapters.order(:name).each do |c| %>
      <% liste3.push([c.name, c.id]) %>
    <% end %>
    <% liste2.push(liste3) %>

    <% liste.push(liste2) %>
  <% end %>
<% end %>

<!-- Ajouter un lien -->
<%= form_for(:prerequisite) do |f| %>
  <h3 class="mt-3">Ajouter un lien</h3>
  <div class="mb-2">
  <%= f.label "Prérequis", :for => "add_form_prerequisite", :class => "form-label" %>
  <%= f.select(:prerequisite_id, grouped_options_for_select(liste), {}, { :class => "form-select", :style => "max-width:300px;", :prompt => true, :id => "add_form_prerequisite" }) %>
  </div>
  <div class="mb-2">
  <%= f.label "Chapitre", :for => "add_form_chapter", :class => "form-label" %>
  <%= f.select(:chapter_id, grouped_options_for_select(liste), {}, { :class => "form-select", :style => "max-width:300px;", :prompt => true, :id => "add_form_chapter" }) %>
  </div>
  <%= f.submit "Ajouter ce lien", class: "btn btn-primary" %>
<% end %>
