<% provide(:title, "Soumissions") %>

<h1>
<%= title_1("Soumissions") %>
<span style="font-size:20px;"> - <%= link_to "Tout voir", allsub_path %>
<% if current_user.sk.root? || current_user.sk.suspicions.count > 0 %>
 - <%= link_to "Plagiats", suspicions_path %>
<% end %>
<% if current_user.sk.root? || current_user.sk.starproposals.count > 0 %>
 - <%= link_to "Étoiles", starproposals_path %>
<% end %>
</span>
</h1>

<% section = 0 %>
<% if(params.has_key?:section) %>
  <% section = params[:section].to_i %>
<% end %>
<% section_condition = (section > 0) ? "problems.section_id = #{section}" : "" %>
<% section_choices = [["Toutes les sections", 0]] %>
<% Section.where(:fondation => false).order(:id).each do |s| %>
  <% section_choices.push([s.name, s.id]) %>
<% end %>

<% levels_int = 31 %>
<% levels = [1, 2, 3, 4, 5] %>
<% if(params.has_key?:levels) %>
  <% levels = [] %>
  <% levels_int = params[:levels].to_i %>
  <% for l in [1, 2, 3, 4, 5] %>
    <% if (levels_int & (1 << (l-1)) != 0) %>
      <% levels.push(l) %>
    <% end %>
  <% end %>
<% end %>

<% levels_choices = [["Tous les niveaux", 31], ["Niveaux 1 et 2", 3], ["Niveaux 3, 4 et 5", 28]] %>
<% (1..5).each do |x| %>
  <% levels_choices.push(["Niveau #{x}", 1 << (x-1)]) %>
<% end %>

<form action="" method="get" name="search_section_and_levels">
  <div class="row mb-1">
  <div class="col-md-7"></div>
  <div class="col-md-3 pb-1">
  <%= select_tag :section, options_for_select(section_choices, section).html_safe, :class =>"form-select", :onchange => ("javascript: document.search_section_and_levels.submit();") %>
  </div>
  <div class="col-md-2 pb-1">
  <%= select_tag :levels, options_for_select(levels_choices, levels_int).html_safe, :class =>"form-select", :onchange => ("javascript: document.search_section_and_levels.submit();") %>
  </div>
  </div>
</form>

<!-- Graphique du nombre de soumissions en attente -->
<% date_end = Time.now %>
<% date_begin_bad = date_end - 7.days %>
<% time_interval = 20.minutes %>
<% date_begin = date_begin_bad.beginning_of_hour %>
<% while date_begin + time_interval <= date_begin_bad %>
  <% date_begin = date_begin + time_interval %>
<% end %>
<% date_begin_for_test = date_begin - 2.days %>
<% num_intervals = ((date_end - date_begin) / time_interval).ceil %>
<% new_sub = Array.new(num_intervals, 0) %>
<% new_cor = Array.new(num_intervals, 0) %>

<% Submission.joins(:problem).select(:created_at, :intest, :problem_id, :user_id).where("visible = ? AND created_at > ? AND (intest = ? OR created_at > ?)", true, date_begin_for_test, true, date_begin).where(section_condition).where("problems.level in (?)", levels).each do |s| %>
  <% date_sub = s.created_at %>
  <% if s.intest? %>
    <% p = s.problem %>
    <% t = p.virtualtest %>
    <% date_start = t.takentests.where(:user_id => s.user_id).first.taken_time %>
    <% date_sub = date_start + (t.duration).minutes %>
  <% end %>
  <% if date_sub >= date_begin %>
    <% interval_id = [((date_sub - date_begin) / time_interval).floor, num_intervals-1].min %>
    <% new_sub[interval_id] = new_sub[interval_id] + 1 %>
  <% end %>
<% end %>

<% Following.joins(submission: :problem).select("followings.created_at").where("kind = 1 AND followings.created_at > ?", date_begin).where(section_condition).where("problems.level in (?)", levels).each do |f| %>
  <% interval_id = [((f.created_at - date_begin) / time_interval).floor, num_intervals-1].min %>
  <% new_cor[interval_id] = new_cor[interval_id] + 1 %>
<% end %>

<% num_waiting_now = Submission.joins(:problem).where(:status => :waiting, :visible => true).where(section_condition).where("problems.level in (?)", levels).count %>
<% graph = Array.new(num_intervals+1, 0) %>
<% graph[num_intervals] = num_waiting_now %>
<% r = (num_intervals-1)..0 %>
<% (r.first).downto(r.last).each do |i| %>
  <% graph[i] = graph[i+1] + new_cor[i] - new_sub[i] %>
<% end %>
<% graph_maxi = graph.max+1 %>

<center>

<!-- Endroit pour dessiner le graphique des soumissions en attente -->
<div id="contenant" class="mt-3 mb-2" style="width:100%; max-width:900px; height:280px; position:relative; display:block;">
<canvas id="myCanvas" width="900" height="280" style="position:absolute; left:0px; top:0px;">
Votre navigateur ne supporte pas les canvas.
</canvas>
</div>

</center>


<script type="text/javascript">
  function respondCanvas() {
    // Check light or dark theme
    var is_dark = (document.documentElement.getAttribute('data-bs-theme') == 'dark');
    
    // Get the canvas & context
    var c = document.getElementById('myCanvas');
    var ctx = c.getContext('2d');
    var container = c.parentElement;
    
    c.setAttribute('width', container.offsetWidth); //max width
    c.setAttribute('height', 280*container.offsetWidth/900.0); //max height

    container.style.height = 280*container.offsetWidth/900.0 + "px"

    // Draw content

    var pct = c.offsetWidth/900.0;
    
    // Rectangle et fond blanc
    ctx.beginPath();
    ctx.rect(pct*50, pct*5, pct*806, pct*250);
    ctx.fillStyle = (is_dark ? 'rgb(33, 37, 41)' : 'white');
    ctx.fill(); 
    
    ctx.lineWidth = 1;
    ctx.strokeStyle = (is_dark ? 'white' : 'black');
    ctx.stroke();  
    
    // Labels axe des X
    ctx.font="12px Arial";
    ctx.fillStyle = (is_dark ? 'white' : 'black');
    ctx.textAlign = 'center';
    
    ctx.setLineDash([10, 10]);
    ctx.beginPath();
    
    if(pct > 0.6)
    {
      <% d = date_end %>
      <% num_days = 0 %>
      <% while(d > date_begin - 1.minute) %>
        <% ratio = (d - date_begin)/(date_end - date_begin) %>
        ctx.fillText("J-<%= num_days %>",pct*<%= 50+(800*ratio) %>,pct*265+7);
        <% num_days = num_days + 1 %>
        <% d = date_end - (num_days).days %>
      <% end %>
    }
    
    // Barres horizontales (et labels axe des Y)
    if (pct < 0.7)
    {
      ctx.font="9px Arial";
    }
    
    ctx.textAlign = 'right';
    ctx.lineWidth = 1;
    ctx.strokeStyle = (is_dark ? '#bbbbbb' : 'grey');
    <% i = graph_maxi - 1 %>
    <% i_step = [(i/5.0).ceil, 1].max %>
    <% while(i > 0) %>
      haut = <%= 255-240*i/graph_maxi.to_f %>
      ctx.moveTo(pct*50, pct*(haut));
      ctx.lineTo(pct*856, pct*(haut));
      ctx.fillText("<%= i %>", pct*44-2, pct*(haut+4));
      <% i = i - i_step %>
    <% end %>
    ctx.stroke();
    
    // Graphique: entre 50 et 850 --> largeur totale 800, à diviser en num_intervals
    
    ctx.beginPath();
    ctx.moveTo(pct*850, pct*<%= 255 - 240*graph[num_intervals]/graph_maxi.to_f %>);
    ctx.strokeStyle = 'orange';
    ctx.setLineDash([]);
    ctx.lineWidth = 2;
    <% width_one_interval = 800.0 / num_intervals %>
    <% (r.first).downto(r.last).each do |i| %>
      ctx.lineTo(pct*<%= 50+(i+1)*width_one_interval %>, pct*<%= 255 - 240*graph[i]/graph_maxi.to_f %>);
    <% end %>
    ctx.stroke() 
  }

  window.addEventListener("resize", () => {
    respondCanvas();
  });
  
  window.addEventListener("theme-change", () => {
    respondCanvas();
  });
  
  respondCanvas();
</script>


<% if @submissions.size == 0 %>
  <p>Il n'y a plus rien à corriger, beau boulot !</p>
<% else %>

  <% if !current_user.sk.admin? %>
    <% problem_solved = Array.new %>
    <% current_user.sk.solvedproblems.select(:problem_id).each do |sp| %>
      <% problem_solved[sp.problem_id] = true %>
    <% end %>
  <% end %>

  <table class="table table-bordered">
  <tr class="table-ld-header"><th class="text-center">Statut</th><th class="d-none d-lg-table-cell">Date de la soumission</th><th>Qui</th><th class="d-none d-lg-table-cell">Correcteur</th><th class="text-center">Type</th><th class="d-none d-lg-table-cell text-center">Long.</th><th></th></tr>
  <% @submissions.each do |n| %>
    <% hidden_sub = (!current_user.sk.admin? && problem_solved[n.problem_id] != true) %>
    <%= render 'submissions/showline', s: n, hide_last_activity: true, show_section_and_level: true, hidden_sub: hidden_sub, show_num_waiting_days_from: "created_at", show_correctors: true, show_content_length: true %>
  <% end %>
  </table>

<% end %>
